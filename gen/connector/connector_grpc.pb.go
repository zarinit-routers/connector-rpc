// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: connector/connector.proto

package connector

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Nodes_NodesByGroup_FullMethodName = "/Nodes/NodesByGroup"
	Nodes_AddTag_FullMethodName       = "/Nodes/AddTag"
	Nodes_RemoveTag_FullMethodName    = "/Nodes/RemoveTag"
)

// NodesClient is the client API for Nodes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodesClient interface {
	NodesByGroup(ctx context.Context, in *NodesByGroupRequest, opts ...grpc.CallOption) (*NodesResponse, error)
	AddTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*Node, error)
	RemoveTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*Node, error)
}

type nodesClient struct {
	cc grpc.ClientConnInterface
}

func NewNodesClient(cc grpc.ClientConnInterface) NodesClient {
	return &nodesClient{cc}
}

func (c *nodesClient) NodesByGroup(ctx context.Context, in *NodesByGroupRequest, opts ...grpc.CallOption) (*NodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodesResponse)
	err := c.cc.Invoke(ctx, Nodes_NodesByGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) AddTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*Node, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Node)
	err := c.cc.Invoke(ctx, Nodes_AddTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) RemoveTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*Node, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Node)
	err := c.cc.Invoke(ctx, Nodes_RemoveTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodesServer is the server API for Nodes service.
// All implementations must embed UnimplementedNodesServer
// for forward compatibility.
type NodesServer interface {
	NodesByGroup(context.Context, *NodesByGroupRequest) (*NodesResponse, error)
	AddTag(context.Context, *TagRequest) (*Node, error)
	RemoveTag(context.Context, *TagRequest) (*Node, error)
	mustEmbedUnimplementedNodesServer()
}

// UnimplementedNodesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodesServer struct{}

func (UnimplementedNodesServer) NodesByGroup(context.Context, *NodesByGroupRequest) (*NodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodesByGroup not implemented")
}
func (UnimplementedNodesServer) AddTag(context.Context, *TagRequest) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTag not implemented")
}
func (UnimplementedNodesServer) RemoveTag(context.Context, *TagRequest) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTag not implemented")
}
func (UnimplementedNodesServer) mustEmbedUnimplementedNodesServer() {}
func (UnimplementedNodesServer) testEmbeddedByValue()               {}

// UnsafeNodesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodesServer will
// result in compilation errors.
type UnsafeNodesServer interface {
	mustEmbedUnimplementedNodesServer()
}

func RegisterNodesServer(s grpc.ServiceRegistrar, srv NodesServer) {
	// If the following call pancis, it indicates UnimplementedNodesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Nodes_ServiceDesc, srv)
}

func _Nodes_NodesByGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodesByGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).NodesByGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nodes_NodesByGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).NodesByGroup(ctx, req.(*NodesByGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_AddTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).AddTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nodes_AddTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).AddTag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_RemoveTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).RemoveTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nodes_RemoveTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).RemoveTag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Nodes_ServiceDesc is the grpc.ServiceDesc for Nodes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Nodes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Nodes",
	HandlerType: (*NodesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NodesByGroup",
			Handler:    _Nodes_NodesByGroup_Handler,
		},
		{
			MethodName: "AddTag",
			Handler:    _Nodes_AddTag_Handler,
		},
		{
			MethodName: "RemoveTag",
			Handler:    _Nodes_RemoveTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connector/connector.proto",
}
